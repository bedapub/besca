
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plotting/plot_qc.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plotting_plot_qc.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plotting_plot_qc.py:


quality control plots
=====================

This example shows you the inbuilt quality control plots from besca.

.. GENERATED FROM PYTHON SOURCE LINES 8-15

.. code-block:: default


    # import libraries
    import besca as bc
    import matplotlib.pyplot as plt
    import pytest

    # pytest.skip('Test is only for here as example and should not be executed')







.. GENERATED FROM PYTHON SOURCE LINES 16-18

Before beginning any analysis it is useful to take a detailled look at your dataset
to get an understanding for its characteristics.

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    # import data
    adata = bc.datasets.pbmc3k_raw()








.. GENERATED FROM PYTHON SOURCE LINES 24-29

transcript capture efficiency
-----------------------------

Plotting the transcript capture efficiency will give you an overview of the expression
of genes within cells relative to the total UMI counts.

.. GENERATED FROM PYTHON SOURCE LINES 29-38

.. code-block:: default


    # transcript capture efficiency
    fig, ax = plt.subplots(1)
    fig.set_figwidth(8)
    fig.set_figheight(5)
    fig.tight_layout()

    bc.pl.transcript_capture_efficiency(adata, ax=ax)




.. image-sg:: /auto_examples/plotting/images/sphx_glr_plot_qc_001.png
   :alt: transcript capture efficiency
   :srcset: /auto_examples/plotting/images/sphx_glr_plot_qc_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 39-46

overview of library size unprocessed
------------------------------------

This gives you an overview of the read distribution per cell. High quality cells
will have a larger number of reads per cell and this is a parameter you can use to
filter out low quality cells. The number of reads you would expect per cell is strongly
dependent on the single-cell sequencing method you used.

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default


    bc.pl.librarysize_overview(adata)




.. image-sg:: /auto_examples/plotting/images/sphx_glr_plot_qc_002.png
   :alt: library size distribution, NODG, dropouts
   :srcset: /auto_examples/plotting/images/sphx_glr_plot_qc_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1100x800 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 50-56

most strongly expressed transcripts
-----------------------------------

This will let you identify the genes which dominant your experiment
(generally you would expect mitochondrial and ribosomal genes,
in this dataset these genes have been removed beforehand).

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default


    bc.pl.top_genes_counts(adata=adata, top_n=25)




.. image-sg:: /auto_examples/plotting/images/sphx_glr_plot_qc_003.png
   :alt: Top 25 genes account for 25.24% of all UMI counts
   :srcset: /auto_examples/plotting/images/sphx_glr_plot_qc_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot:title={'center':'Top 25 genes account for 25.24% of all UMI counts'}, xlabel='fraction of UMI counts per cell', ylabel='gene'>



.. GENERATED FROM PYTHON SOURCE LINES 60-65

visualize the processed dataset
-------------------------------

After performing your filtering it is generally a good idea to take another look
at your dataset to ensure that the filtering parameters used were reasonable.

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default


    adata = bc.datasets.pbmc3k_processed()








.. GENERATED FROM PYTHON SOURCE LINES 69-71

Please note that the displayed counts have already been scaled. You would now expect
a more or less normal distribution of library size within your dataset.

.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. code-block:: default


    bc.pl.librarysize_overview(adata)



.. image-sg:: /auto_examples/plotting/images/sphx_glr_plot_qc_004.png
   :alt: library size distribution, NODG, dropouts
   :srcset: /auto_examples/plotting/images/sphx_glr_plot_qc_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1100x800 with 3 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.764 seconds)


.. _sphx_glr_download_auto_examples_plotting_plot_qc.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_qc.py <plot_qc.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_qc.ipynb <plot_qc.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
